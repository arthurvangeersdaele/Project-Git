---
title: "Projet LSTAT2110(A) -- Analyse de données"
author: "PETIT Romain & VAN GEERSDAELE Arthur, 4827-1700 & 3004-1700, GBIO2M"
output:
pdf_document:
number_sections: yes
toc: yes
toc_depth: 3
latex_engine:  xelatex
sansfont: Calibri Light
html_document:
df_print: paged
toc: yes
toc_depth: '3'
word_document:
toc: yes
toc_depth: '3'
---
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(comment = "")
# libraries
library(pander)
library(FactoMineR)
library(corrplot)
library(resample)
library(factoextra)
vars = colStdevs(data.initial)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(comment = "")
# libraries
library(pander)
library(FactoMineR)
library(corrplot)
library(resample)
library(factoextra)
# download.file("https://www.openintro.org/book/statdata/bdims.csv", destfile = "bdims.csv")
data.initial <- read.csv("bdims.csv")
data.quantitative <- subset(data.initial, select = -c(length(data.initial)))
means = colMeans(data.initial)
barplot(means, main="Moyennes des variables", names.arg = names(data.initial), col=rainbow(20),  las = 2)
data.cm = subset(data.initial, select = c(length(data.initial)-4:length(data.initial)))
means = rowMeans(data.initial)
bp <- barplot(means, main="Moyennes des mesures de diamètre/circonférence", names.arg = seq(from=1, to= 507, by=1), col="black",  las = 2)
vars = colStdevs(data.initial)
barplot(vars, main="Écart-type des variables", names.arg = names(data.initial), col=rainbow(20),  las = 2)
data <- data.initial
par(mfrow=c(1,3))
histoplot <- function(X, title){
summary <- summary(X)
std <- sqrt(var(X))
hist(X, breaks=30, main=paste("Histogram of", title), ylab="#subjects", xlab=title)
abline(v = summary[[2]], col = "blue", lwd = 2) # 1st quantile
abline(v = summary[[3]], col = "green", lwd = 2) # median
abline(v = summary[[4]], col = "red", lwd = 2) # mean
abline(v = summary[[5]], col = "purple", lwd = 2) # 3rd quantile
legend("topright",
c("1st quantile", "median", "mean", "3rd quantile", paste("std :", round(std, digits = 2))),
#pch=c(15, 15, 15, 15, NA),
#col=c("blue","green","red", "purple", "white"),
fill=c("blue","green","red", "purple", NA),
bg="white",
cex = 1
)
}
histoplot(data$age, "Age")
histoplot(data$wgt, "Weight")
histoplot(data$hgt, "Height")
normalize <- function(x) {
(x - min(x)) / (max(x) - min(x))
}
data.normalized <- as.data.frame(lapply(data.quantitative, normalize))
cp <- corrplot(cor(data.normalized), method = "square")
data.age = data.initial$age
data.initial$age = NULL
data.quantitative$age = NULL
res <- PCA(data.quantitative, graph = FALSE)
barplot(100*res$eig[,"eigenvalue"]/sum(res$eig[,"eigenvalue"]), col = 'red', las = 2,  ylab="[%]", main = "Inertie par composante principale")
fviz_pca_var(res, labelsize = 3, repel = TRUE) +
theme(text = element_text(size = 7.5),
axis.title = element_text(size = 7.5),
axis.text = element_text(size = 7.5))
barplot(round(sort(rowSums(res$var$cos2[,1:2])), digits = 2), col = 'green', las =2,  ylab="cos2",, main = "Qualités de représentation des variables sur le plan 1-2")
abline(h = 0.5, col = "red")
legend("topleft",
c("50% threshold"),
fill=c("red"),
bg="white",
cex = 1
)
# fviz_pca_ind (res, col.ind = "contrib",
#              gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
#              repel = TRUE # Évite le chevauchement de texte
#              )+
#   theme(text = element_text(size = 7.5),
#         axis.title = element_text(size = 7.5),
#         axis.text = element_text(size = 7.5))
genre <- NULL
for(i in 1:507){
if (data.initial$sex[i] == 1){
sex = "male"
} else {
sex = "female"
}
genre <- c(genre, sex)
}
fviz_pca_ind (res, geom.ind = "point", # show points only (nbut not "text")
col.ind = genre, # color by groups
palette = c("#00AFBB", "#E7B800", "#FC4E07"),
addEllipses = TRUE, # Concentration ellipses
legend.title = "Groups"
)+
theme(text = element_text(size = 7.5),
axis.title = element_text(size = 7.5),
axis.text = element_text(size = 7.5))
bmi_values = data.initial$wgt / (data.initial$hgt/100 * data.initial$hgt/100)
bmi_labels = c("Underweight III", "Underweight II", "Underweight I", "Normal Range", "Overweight", "Obese I", "Obese II", "Obese III")
bmi_intervals =  c(0, 16.0, 17.0, 18.5, 25, 30, 35, 40, 10000)
BMI = NULL
for(bmi in bmi_values){
for(j in c(1:(length(bmi_intervals)-1))){
if(bmi > bmi_intervals[j] && bmi < bmi_intervals[j+1] ){
BMI <- c(BMI, bmi_labels[j])
}
}
}
fviz_pca_ind (res, geom.ind = "point", # show points only (nbut not "text")
col.ind = BMI, # color by groups
palette = c("#00AFBB", "#E7B800", "purple", "red", "blue", "green"),
addEllipses = TRUE, # Concentration ellipses
legend.title = "Groups"
)+
theme(text = element_text(size = 7.5),
axis.title = element_text(size = 7.5),
axis.text = element_text(size = 7.5))
res.CA <- CA(data.quantitative, graph =  FALSE)
barplot(res.CA$eig[,3], col = 'red', las =2,  ylab="[%]", main = "Quantité d'information cumulative par axe")
fviz_ca_biplot (res.CA, labelsize = 3, repel = TRUE) +
theme(text = element_text(size = 7.5),
axis.title = element_text(size = 7.5),
axis.text = element_text(size = 7.5))
fviz_ca_row(res.CA, col.row = bmi_values,
gradient.cols = c ("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE)
fviz_ca_col(res.CA, repel = TRUE)
barplot(round(sort(rowSums(res.CA$col$cos2[,1:2])), digits = 3), col = 'green', las =2,  ylab="cos2",, main = "Cos2 des modalités sur le plan factoriel 1-2")
abline(h = 0.5, col = "red")
legend("topleft",
c("50% threshold"),
fill=c("red"),
bg="white",
cex = 1
)
# barplot(round(sort(rowSums(res.CA$row$cos2[,1:2])), digits = 3), col = 'green', las =2,  ylab="cos2",, main = "Qualités de représentation des individus sur les axes 1 et 2")
barplot(round(sort(rowSums(res.CA$col$contrib[,1:2])), digits = 3), col = 'green', las =2,  ylab="contribution [%]",, main = "Contribution des modalités sur le plan factoriel 1-2")
pander(t(round(res.CA$col$contrib[,c(1,2)], digits = 3)))
## Généralités
```{r echo=FALSE, warning = FALSE, out.width="50%", fig.align="center"}
means = colMeans(data.initial)
barplot(means, main="Moyennes des variables", names.arg = names(data.initial), col=rainbow(20),  las = 2)
data.cm = subset(data.initial, select = c(length(data.initial)-4:length(data.initial)))
means = rowMeans(data.initial)
bp <- barplot(means, main="Moyennes des mesures de diamètre/circonférence", names.arg = seq(from=1, to= 507, by=1), col="black",  las = 2)
par(mfrow=c(1,2))
fviz_pca_var(res, labelsize = 3, repel = TRUE) +
theme(text = element_text(size = 7.5),
axis.title = element_text(size = 7.5),
axis.text = element_text(size = 7.5))
barplot(round(sort(rowSums(res$var$cos2[,1:2])), digits = 2), col = 'green', las =2,  ylab="cos2",, main = "Qualités de représentation des variables sur le plan 1-2")
abline(h = 0.5, col = "red")
legend("topleft",
c("50% threshold"),
fill=c("red"),
bg="white",
cex = 1
)
fviz_pca_var(res, labelsize = 3, repel = TRUE) +
theme(text = element_text(size = 7.5),
axis.title = element_text(size = 7.5),
axis.text = element_text(size = 7.5))
barplot(round(sort(rowSums(res$var$cos2[,1:2])), digits = 2), col = 'green', las =2,  ylab="cos2",, main = "Qualités de représentation des variables sur le plan 1-2")
abline(h = 0.5, col = "red")
legend("topleft",
c("50% threshold"),
fill=c("red"),
bg="white",
cex = 1
)
means = colMeans(data.initial)
barplot(means, main="Moyennes des variables", names.arg = names(data.initial), col=rainbow(20),  las = 2)
data.cm = subset(data.initial, select = c(length(data.initial)-4:length(data.initial)))
means = rowMeans(data.initial)
barplot(means, main="Moyennes des mesures de diamètre/circonférence", names.arg = seq(from=1, to= 507, by=1), col="black",  las = 2)
barplot(round(sort(rowSums(res.CA$col$contrib[,1:2])), digits = 3), col = 'green', las =2,  ylab="contribution [%]",, main = "Contribution des modalités sur le plan factoriel 1-2")
```{r echo=FALSE, warning = FALSE, out.width="50%", fig.align="center"}
barplot(round(sort(rowSums(res.CA$col$contrib[,1:2])), digits = 3), col = 'green', las =2,  ylab="contribution [%]",, main = "Contribution des modalités sur le plan factoriel 1-2")
pander(t(round(res.CA$col$contrib[,c(1,2)], digits = 3)))
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(comment = "")
# libraries
library(pander)
library(FactoMineR)
library(corrplot)
library(resample)
library(factoextra)
data=as.data.frame(data.initial)
sex=data$sex
data$sex=NULL
data$age=NULL
datastd=scale(data)
model <- kmeans(datastd, centers = 2) #on détermine à l'avance le nombre de clusters (i.e., centers = 2)
model$cluster #affiche la classe déterminé par le modèle
number=length(which(sex == as.vector(model$cluster)-1))
score=(number/507)*100
score
#Algorithme de Ward
hclust_ward <- hclust(dist(datastd)^2 / (2 * nrow(datastd)), method = "ward.D") # method = "euclidean" par défaut dans la fonction dist()
hclust_ward$height
#Dendrogramme
#plot(hclust_ward)
barplot(hclust_ward$height,
ylab = "aggregation level", names.arg = (nrow(datastd)-1):1, sub="Nombre de classes")
plot(hclust_ward)
bmi_values = data.initial$wgt / (data.initial$hgt/100 * data.initial$hgt/100)
bmi_labels = c("Underweight III", "Underweight II", "Underweight I", "Normal Range", "Overweight", "Obese I", "Obese II", "Obese III")
bmi_intervals =  c(0, 16.0, 17.0, 18.5, 25, 30, 35, 40, 10000)
BMI = NULL
for(bmi in bmi_values){
for(j in c(1:(length(bmi_intervals)-1))){
if(bmi > bmi_intervals[j] && bmi < bmi_intervals[j+1] ){
BMI <- c(BMI, bmi_labels[j])
}
}
}
fviz_pca_ind (res, geom.ind = "point", # show points only (nbut not "text")
col.ind = BMI, # color by groups
palette = c("#00AFBB", "#E7B800", "purple", "red", "blue", "green"),
addEllipses = TRUE, # Concentration ellipses
legend.title = "Groups"
)+
theme(text = element_text(size = 7.5),
axis.title = element_text(size = 7.5),
axis.text = element_text(size = 7.5))
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(comment = "")
knitr::opts_chunk$set(warning = FALSE)
# libraries
library(pander)
library(FactoMineR)
library(corrplot)
library(resample)
library(factoextra)
model$cluster #affiche la classe déterminé par le modèle
model <- kmeans(datastd, centers = 2) #on détermine à l'avance le nombre de clusters (i.e., centers = 2)
matrixplot(as.vector(model$cluster)-1)
install.package("VIM")
install.packages("VIM")
library(factoextra)
matrixplot(as.vector(model$cluster)-1)
matrixplot(as.vector(model$cluster)-1)
#Algorithme de Ward
# hclust_ward <- hclust(dist(datastd)^2 / (2 * nrow(datastd)), method = "ward.D") # method = "euclidean" par défaut dans la fonction dist()
# hclust_ward$height
#Dendrogramme
#plot(hclust_ward)
# barplot(hclust_ward$height,
#         ylab = "aggregation level", names.arg = (nrow(datastd)-1):1, sub="Nombre de classes")
# plot(hclust_ward)
library(vim"")
#Algorithme de Ward
# hclust_ward <- hclust(dist(datastd)^2 / (2 * nrow(datastd)), method = "ward.D") # method = "euclidean" par défaut dans la fonction dist()
# hclust_ward$height
#Dendrogramme
#plot(hclust_ward)
# barplot(hclust_ward$height,
#         ylab = "aggregation level", names.arg = (nrow(datastd)-1):1, sub="Nombre de classes")
# plot(hclust_ward)
library(vim)
matrixplot(as.vector(model$cluster)-1)
#Algorithme de Ward
# hclust_ward <- hclust(dist(datastd)^2 / (2 * nrow(datastd)), method = "ward.D") # method = "euclidean" par défaut dans la fonction dist()
# hclust_ward$height
#Dendrogramme
#plot(hclust_ward)
# barplot(hclust_ward$height,
#         ylab = "aggregation level", names.arg = (nrow(datastd)-1):1, sub="Nombre de classes")
# plot(hclust_ward)
library(VIM)
#Algorithme de Ward
# hclust_ward <- hclust(dist(datastd)^2 / (2 * nrow(datastd)), method = "ward.D") # method = "euclidean" par défaut dans la fonction dist()
# hclust_ward$height
#Dendrogramme
#plot(hclust_ward)
# barplot(hclust_ward$height,
#         ylab = "aggregation level", names.arg = (nrow(datastd)-1):1, sub="Nombre de classes")
# plot(hclust_ward)
library(VIM)
matrixplot(as.vector(model$cluster)-1)
matrixplot(tmp)
tmp <- cbind(as.vector(model$cluster)-1, sex)
matrixplot(tmp)
matrixplot(tmp, col = rainbow(2°))
matrixplot(tmp, col = rainbow(2))
tmp <- cbind(as.vector(model$cluster)-1, sex)
tmp <- cbind(as.vector(model$cluster)-1, sex)
matrixplot(tmp, col = rainbow(2))
matrixplot(tmp, col = 'rainbow(2)'red')
matrixplot(tmp, col = 'red')
matrixplot(tmp, col=c("red", "green", "blue"))
tmp <- cbind((as.vector(model$cluster)-1)*2-1, sex*2-1)
matrixplot(tmp, col=c("red", "green", "blue"))
sex*2-1
matrixplot(tmp, col=c("red", "green"))
matrixplot(tmp, col=c("red", ""green""red""))
matrixplot(tmp, col=c("red", "red"))
matrixplot(tmp, col=c("red", "red", "red"))
matrixplot(tmp, col=c("red", "red", "red", "green"))
matrixplot(tmp, col=c("red", "green", "red", "green"))
matrixplot(tmp, col=c("red", "green", "red", "green"), xlab = c("kMean class attribtuion", "sex"), ylab = "individuals")
matrixplot(tmp, col=c("red", "green", "red", "green"), xlab = "c("kMean class attribtuion", "sex")"class"", ylab = "individuals")
matrixplot(tmp, col=c("red", "green", "red", "green"), xlab = "class", ylab = "individuals")
matrixplot(tmp, col=c("red", "green", "red", "green"), xlab = "class", ylab = "individuals", labels = c("1", "2"))
matrixplot(tmp, col=c("red", "green", "red", "green"), xlab = "class", ylab = "individuals", labels = c("klusters", "sex"))
matrixplot(tmp, col=c("red", "green", "red", "green"), xlab = "class", ylab = "individuals", labels = c("clusters", "sex"), las = 2, main = "Cluster Analysis")
matrixplot(tmp, col=c("red", "green", "red", "green"), xlab = "class", ylab = "individuals", labels = c("clusters", "sex"), las = 0, main = "Cluster Analysis")
matrixplot(tmp, col=c("red", "green", "red", "green"), xlab = "class", ylab = "individuals", labels = c("clusters", "sex"), las = 0, main = "Cluster Analysis")
